1.1 Job Types & When to Use Freestyle

ðŸ”¹ Freestyle Jobs

Definition: GUI-driven jobs where you configure steps (build, test, deploy) using Jenkins UI.

Best for:
    Beginners experimenting with Jenkins.
    Quick automation tasks (run a script, build a small app).
    Legacy systems (older teams still use Freestyle).

Limitations:
    Hard to reuse configurations.
    Not version-controlled (everything is in Jenkins UI).
    Scaling/complex CI/CD flows is painful.


ðŸ”¹ Pipeline Jobs

Definition: Written as code (Jenkinsfile) with declarative or scripted syntax.

Best for:
    Complex CI/CD pipelines.
    Multi-stage workflows (build â†’ test â†’ deploy).
    Version control (Jenkinsfile inside repo).

Why better?
    Reproducible.
    Flexible.
    GitOps-friendly.

âš¡ Rule of Thumb:
ðŸ‘‰ Use Freestyle for learning/simple CI tasks.
ðŸ‘‰ Use Pipeline for production-level CI/CD.


1.2 Workspace & Environment Variables
ðŸ”¹ Workspace
    Each job has its own workspace directory on the Jenkins server/agent.
    Jenkins downloads (clones) the source code into this directory.

Path:
    /var/lib/jenkins/workspace/<JOB_NAME>

    (Linux, default install).
On agents: Each agent also has its own workspace path.


ðŸ”¹ Built-in Environment Variables
Jenkins automatically injects variables in jobs. Examples:

Variable        	Meaning

$WORKSPACE      	Jobâ€™s working directory
$JOB_NAME	        Name of the job
$BUILD_NUMBER   	Build sequence number
$BUILD_ID	        Unique ID of the build
$BUILD_URL	        URL of build in Jenkins
$GIT_COMMIT	        Git commit hash (when Git plugin is used)
$GIT_BRANCH	        Branch being built
$NODE_NAME	        Node/agent executing the job

Example (Linux shell build step):
    echo "Job: $JOB_NAME"
    echo "Build: $BUILD_NUMBER"
    echo "Branch: $GIT_BRANCH"
    echo "Commit: $GIT_COMMIT"
    echo "Workspace: $WORKSPACE"

Windows Agent Example:
    echo Job: %JOB_NAME%
    echo Build: %BUILD_NUMBER%
    echo Branch: %GIT_BRANCH%
    echo Commit: %GIT_COMMIT%
    echo Workspace: %WORKSPACE%


1.3 Triggers (Ways to Start Jobs)

i. Manual
    Just click Build Now from Jenkins UI.
    Useful for ad-hoc runs or testing.

ii. Cron (Build Periodically)
    Uses CRON syntax.
    Example: run every night at midnight:
             H 0 * * *

    Example: run every 5 minutes:
             H/5 * * * *

    H (hash) â†’ Jenkins spreads builds randomly to avoid overloading server.

ii. SCM Polling
    Jenkins checks your source repo (e.g., GitHub) at a set interval.
    Example: check for changes every 2 minutes:
             H/2 * * * *

iv. Webhooks (Recommended)
    Best approach.
    GitHub/GitLab sends a notification to Jenkins immediately after a push.
    No polling â†’ faster & efficient.
    Setup: Add webhook in GitHub repo â†’ point to Jenkins endpoint /github-webhook/.

